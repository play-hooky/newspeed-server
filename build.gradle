plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'org.jetbrains.kotlin.jvm' version '1.6.21'
	id 'org.jetbrains.kotlin.kapt' version '1.6.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.6.21'
}

group = 'com.newspeed'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.17.2")
	set('springCloudVersion', '2021.0.3')
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	testImplementation("org.springframework.boot:spring-boot-starter-test")

	// jackson
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

	// jpa
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")

	// rdbms
	runtimeOnly("com.h2database:h2")
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.testcontainers:mysql:1.17.2'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// bean validation
	implementation 'org.hibernate.validator:hibernate-validator:6.1.2.Final'
	implementation 'org.glassfish:jakarta.el:3.0.3'

	// openfeign
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.7'
}

jacocoTestReport {
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(false)
	}

	def QClass = []
	for (qPattern in "**/QA".."**/QZ") {
		QClass.add(qPattern + "*")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							"**/NewspeedServerApplication*",
							'**/global*'
					] + QClass)
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def QClass = []
	for (qPattern in '*.QA'..'*.QZ') {
		QClass.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true
			element = 'BUNDLE'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
//                minimum = 0.80
			}

			excludes = [
					'**.NewspeedServerApplication*',
					'**/global*'
			] + QClass
		}
	}
}

jacocoTestReport.doFirst {
	delete file('src/main/resources/static/reports')
}
